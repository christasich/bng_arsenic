Caravan.train <- Caravan[train]
Caravan.train <- Caravan[train,]
Caravan.test <- Caravan[-train,]
install.packages('gbm')
names(Caravan)
library(gbm)
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,n.trees=1000,shrinkage=0.01)
train <- sample(1:nrow(Caravan),1000)
Caravan.train <- Caravan[train,]
Caravan.test <- Caravan[-train,]
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,n.trees=1000,shrinkage=0.01)
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,distribution='gaussian',n.trees=1000,shrinkage=0.01)
summary(boost.Caravan)
boost.Caravan$var.levels
x = summary(boost.Caravan)
x$rel.inf
sum(x$rel.inf)
summary(boost.Caravan)
predmat = predict(boost.Caravan,newdata=Caravan.test,n.trees=1000)
predmat = predict(boost.Caravan,newdata=Caravan.test,n.trees=1000,type='response')
predmat
pred.test <- ifelse(predmat >0.2,1,0)
table(Caravan.test$Purchase,pred.test)
predmat <- predict(boost.Caravan,newdata=Caravan.test,n.trees=1000,type='response')
pred.test <- ifelse(predmat >0.2,1,0)
table(Caravan.test$Purchase,pred.test)
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
pred.test <- ifelse(predmat >0.2,1,0)
table(Caravan.test$Purchase,pred.test)
pred.test
table(Caravan.test$Purchase,pred.test)
Caravan[1:1000]
Caravan[1:1000,]
nrow(Caravan)
set.seed(1)
train <- sample(1:nrow(Caravan),1000)
Caravan.train <- Caravan[train,]
Caravan.test <- Caravan[-train,]
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,distribution='gaussian',n.trees=1000,shrinkage=0.01)
summary(boost.Caravan)
train <- slice(Caravan,1:1000)
Caravan.train <- Caravan[train,]
Caravan.test <- Caravan[-train,]
Caravan.train <- slice(Caravan,1:1000)
Caravan.test <- Caravan[-train,]
Caravan.test <- Caravan[-Caravan.train,]
Caravan.test <- setdiff(Caravan,Caravan.train)
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,distribution='gaussian',n.trees=1000,shrinkage=0.01)
summary(boost.Caravan)
set.seed(1)
Caravan.train <- slice(Caravan,1:1000)
Caravan.test <- setdiff(Caravan,Caravan.train)
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,distribution='gaussian',n.trees=1000,shrinkage=0.01)
summary(boost.Caravan)
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
pred.test <- ifelse(predmat >0.2,1,0)
table(Caravan.test$Purchase,pred.test)
Caravan.test$Purchase
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
pred.test <- ifelse(predmat >0.2,'Yes','No')
table(Caravan.test$Purchase,pred.test)
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000)
pred.test <- ifelse(predmat >0.2,'Yes','No')
table(Caravan.test$Purchase,pred.test)
?predict
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
predmat
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000)
predmat
pred.test <- ifelse(predmat >0.2,'Yes','No')
table(Caravan.test$Purchase,pred.test)
Caravan.test$Purchase
pred.test
Caravan$Purchase = ifelse(Caravan$Purchase == "Yes", 1, 0)
Caravan.train <- slice(Caravan,1:1000)
Caravan.test <- setdiff(Caravan,Caravan.train)
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000)
pred.test <- ifelse(predmat > 0.2,1,0)
table(Caravan.test$Purchase,pred.test)
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,distribution='gaussian',n.trees=1000,shrinkage=0.01)
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000)
pred.test <- ifelse(predmat > 0.2,1,0)
table(Caravan.test$Purchase,pred.test)
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
pred.test <- ifelse(predmat > 0.2,1,0)
table(Caravan.test$Purchase,pred.test)
set.seed(1)
Caravan$Purchase = ifelse(Caravan$Purchase == "Yes", 1, 0)
Caravan.train <- slice(Caravan,1:1000)
Caravan.test <- setdiff(Caravan,Caravan.train)
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,distribution='gaussian',n.trees=1000,shrinkage=0.01)
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
pred.test <- ifelse(predmat > 0.2,1,0)
table(Caravan.test$Purchase,pred.test)
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
pred.test <- ifelse(predmat > 0.2,1,0)
table(Caravan.test$Purchase,pred.test)
set.seed(1)
Caravan$Purchase = ifelse(Caravan$Purchase == "Yes", 1, 0)
Caravan.train <- slice(Caravan,1:1000)
Caravan.test <- setdiff(Caravan,Caravan.train)
library(gbm)
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,distribution='gaussian',n.trees=1000,shrinkage=0.01)
summary(boost.Caravan)
predmat <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
pred.test <- ifelse(predmat > 0.2,1,0)
table(Caravan.test$Purchase,pred.test)
probs.test <- predict(boost.Caravan, Caravan.test, n.trees = 1000, type = "response")
pred.test <- ifelse(probs.test > 0.2, 1, 0)
table(Caravan.test$Purchase, pred.test)
boost.Caravan <- gbm(Purchase~.,data=Caravan.train,n.trees=1000,shrinkage=0.01)
summary(boost.Caravan)
probs.test <- predict(boost.Caravan, Caravan.test, n.trees = 1000, type = "response")
pred.test <- ifelse(probs.test > 0.2, 1, 0)
table(Caravan.test$Purchase, pred.test)
cm <- table(Caravan.test$Purchase,pred.test)
cm
cm[1]
cm[1]
cm[2]
cm[3]
cm[3]
cm[4]
yes <- cm[3]/(cm[3]+cm[4])
yes
yes <- cm[4]/(cm[3]+cm[4])
yes
percent_rank(yes)
lm.Caravan <- glm(Purchase~.,data=Caravan.train,family='binomial')
lm.prob = predict(lm.Caravan,Caravan.test,type='response')
lm.pred = ifelse(lm.prob>0.2,1,0)
lm.cm <- table(Caravan.test$Purchase,pred.test)
lm.tp <- lm.cm[4]/(lm.cm[3]+lm.cm[4])*100
lm.tp
lm.cm
boost.tp
boost.prob <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
boost.pred <- ifelse(predmat>0.2,1,0)
boost.cm <- table(Caravan.test$Purchase,pred.test)
boost.tp <- boost.cm[4]/(boost.cm[3]+boost.cm[4])*100
lm.Caravan <- glm(Purchase~.,data=Caravan.train,family='binomial')
lm.prob = predict(lm.Caravan,Caravan.test,type='response')
lm.pred = ifelse(lm.prob>0.2,1,0)
lm.cm <- table(Caravan.test$Purchase,pred.test)
lm.tp <- lm.cm[4]/(lm.cm[3]+lm.cm[4])*100
boost.tp
lm.tp
boost.prob <- predict(boost.Caravan,Caravan.test,n.trees=1000,type='response')
boost.pred <- ifelse(predmat>0.2,1,0)
boost.cm <- table(Caravan.test$Purchase,boost.pred)
boost.tp <- boost.cm[4]/(boost.cm[3]+boost.cm[4])*100
lm.Caravan <- glm(Purchase~.,data=Caravan.train,family='binomial')
lm.prob = predict(lm.Caravan,Caravan.test,type='response')
lm.pred = ifelse(lm.prob>0.2,1,0)
lm.cm <- table(Caravan.test$Purchase,lm.pred)
lm.tp <- lm.cm[4]/(lm.cm[3]+lm.cm[4])*100
boost.tp
boost.cm
lm.tp
svm.poly.fit <- svm(mpg.bin~.,data=df,kernel='polynomial',cost=10,degree=2)
mpg.med <- median(Auto$mpg)
df <- mutate(Auto,mpg.bin = as.factor(ifelse(mpg>=mpg.med,1,0)))
set.seed(1)
tune.out <- tune(svm,mpg.bin~.,data=df,kernel='polynomial',ranges=list(cost=c(0.1,1,5,10),degree = c(2,3,4)))
svm.poly.fit <- svm(mpg.bin~.,data=df,kernel='polynomial',cost=10,degree=2)
svm.rad.fit <- svm(mpg.bin~.,data=df,kernel='radial',cost=10,gamma=0.01)
plotpairs = function(fit) {
for (name in names(df)[!(names(df) %in% c("mpg", "mpg.bin", "name"))]) {
plot(fit, df, as.formula(paste("mpg.bin~", name, sep = "")))
}
}
plotpairs(svm.poly.fit)
summary(boost.Caravan)
x=summary(boost.Caravan)
x$rel.inf
df = tbl_df(read.csv("../data/bamwsp.csv",header=T))
library(tidyverse)
df = tbl_df(read.csv("../data/bamwsp.csv",header=T))
df = tbl_df(read.csv("../data/bamwsp.csv",header=T))
df = tbl_df(read.csv("../data/bamwsp.csv",header=T))
get(cwd)
cwd()
get(cwd)
get.cwd()
getwd()
getwd()
df = tbl_df(read.csv("../data/bamwsp.csv",header=T))
source('as_model.R')
getwd()
library(tidyverse)
chdir=T
df = tbl_df(read.csv(file.path("../data/bamwsp.csv",header=T))
df = tbl_df(read.csv("../data/bamwsp.csv",header=T))
source("as_model.r", chdir = T)
source(chdir = T)
source('C:/Projects/Vanderbilt/bng_arsenic/scripts/as_model.R')
library(tidyverse)
df = tbl_df(read.csv("../data/bamwsp.csv",header=T))
library(tidyverse)
df = tbl_df(read.csv("C:/Projects/Vanderbilt/bng_arsenic/data/bamwsp.csv",header=T))
setwd('"C:/Projects/Vanderbilt/bng_arsenic/')
library(tidyverse)
setwd('"C:/Projects/Vanderbilt/bng_arsenic/')
df = tbl_df(read.csv("../data/bamwsp.csv",header=T))
df = tbl_df(read.csv("/data/bamwsp.csv",header=T))
df = tbl_df(read.csv("./data/bamwsp.csv",header=T))
df = tbl_df(read.csv("data/bamwsp.csv",header=T))
setwd('C:/Projects/Vanderbilt/bng_arsenic/')
df = tbl_df(read.csv('data/bamwsp.csv',header=T))
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df
View(xy.df)
View(xy.df)
View(df)
View(df)
test = left_join(as.df,xy.df,by='X_CORD')
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
test = left_join(as.df,xy.df,by='X_CORD')
test = left_join(as.df,xy.df,by='X_COORD')
rename(xy.df,GEO2='geocode')
rename(xy.df,c('lat','lon','geocode','dist_west_km'))
rename(xy.df,c('lat','lon','geocode','dist_west_km'))
rename(xy.df,'GEO2'='geocode')
rename(xy.df,c(GEO2'='geocode'))
rename(xy.df,c('GEO2'='geocode'))
rename(xy.df,c('X_COORD'='lon','Y_COORD'='lat','GEO2'='geocode','DIST_FROM_WEST_KM'='dist_west_km'))
plyr::rename(xy.df,c('GEO2'='geocode'))
library(tidyverse)
setwd('C:/Projects/Vanderbilt/bng_arsenic/')
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
rename(xy.df,c('GEO2'='geocode'))
plyr::
plyr::rename(xy.df,c('GEO2'='geocode'))
test = left_join(as.df,xy.df,by='')
xy.df = plyr::rename(xy.df,c('GEO2'='geocode'))
test = left_join(as.df,xy.df,by='')
test = left_join(as.df,xy.df,by='geocode')
View(test)
xy.df = plyr::rename(xy.df,'GEO2'='geocode')
xy.df = plyr::rename(xy.df,c('GEO2'='geocode'))
xy.df = rename(xy.df,GEO2 = geocode))
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,GEO2 = geocode)
xy.df = dplyr::rename(xy.df,GEO2 = geocode)
xy.df = dplyr::rename(xy.df,GEO2 = geocode)
xy.df = rename(xy.df,geocode = GEO2)
df = left_join(as.df,xy.df,by='geocode')
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
xy.df = select(xy.df,lon,lat,geocode)
df = left_join(as.df,xy.df,by='geocode')
View(df)
View(df)
View(df)
pairs(df)
pairs(df-geocode)
?pairs
pairs(data=df,subset=c(arsenic_ppb,lon,lat))
pairs(data=df,subset=c('arsenic_ppb','lon','lat'))
pairs(df,subset=c('arsenic_ppb','lon','lat'))
pairs(sample_frac(df,0.2,replace=F))
warnings()
any(is.na(df))
is.na(df)
View(df)
is.na(df$geocode)
any(is.na(df$geocode))
any(is.na(df$depth_ft))
any(is.na(df$arsenic_ppb))
any(is.na(df$arsenic_lon))
any(is.na(df$lon))
any(is.na(df$lat))
which(is.na(df$lon))
df = filter(df,is.na(lon))
df = left_join(as.df,xy.df,by='geocode')
df = filter(df,!is.na(lon))
df = left_join(as.df,xy.df,by='geocode')
df = filter(df,!is.na(lon))
df = filter(df,!is.na(lat))
pairs(sample_frac(df,0.01,replace=F))
pairs(sample_frac(df,0.1,replace=F))
df = select(df,arsenic_ppb,depth_ft,lon,lat)
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
df = left_join(as.df,xy.df,by='geocode')
df = filter(df,!is.na(lon))
df = filter(df,!is.na(lat))
df = select(df,arsenic_ppb,depth_ft,lon,lat)
pairs(sample_frac(df,0.1,replace=F))
df.sample = sample_frac(df,0.1,replace=F)
plot(df.sample$arsenic_ppb~df.sample$depth_ft)
df.sample1 = filter(df.sample,arsenic_ppb>0)
plot(df.sample1$arsenic_ppb~df.sample1$depth_ft)
df %>% select(arsenic_ppb,depth_ft,lon,lat)
df %>%
select(arsenic_ppb,depth_ft,lon,lat)
df = select(arsenic_ppb,depth_ft,lon,lat)
df %>%
df = select(arsenic_ppb,depth_ft,lon,lat)
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
df = left_join(as.df,xy.df,by='geocode')
df = select(df,arsenic_ppb,depth_ft,lon,lat)
df = left_join(as.df,xy.df,by='geocode')
df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
df = select(arsenic_ppb,depth_ft,lon,lat)
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
df = left_join(as.df,xy.df,by='geocode')
df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
df = select(arsenic_ppb,depth_ft,lon,lat)
df = left_join(as.df,xy.df,by='geocode')
df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
select(arsenic_ppb,depth_ft,lon,lat)
df = df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
select(arsenic_ppb,depth_ft,lon,lat)
df %>%
filter(arsenic_ppb>0) %>%
plot(df.sample1$arsenic_ppb~df.sample1$depth_ft)
plot(arsenic_ppb~depth_ft)
df %>%
filter(arsenic_ppb>0) %>%
plot(arsenic_ppb~depth_ft)
df %>%
filter(arsenic_ppb>0) %>%
hist(arsenic_ppb,depth_ft)
df %>%
filter(arsenic_ppb>0) %>%
plot(arsenic_ppb~depth_ft)
df %>%
filter(arsenic_ppb>0) %>%
plot(arsenic_ppb,depth_ft)
with(arsenic_ppb,depth_ft))
df %>%
filter(arsenic_ppb>0) %>%
with(arsenic_ppb,depth_ft))
df %>%
filter(arsenic_ppb>0) %>%
with(arsenic_ppb~depth_ft))
df %>%
filter(arsenic_ppb>0) %>%
with(plot(arsenic_ppb~depth_ft))
hist(df.sample1$arsenic_ppb~df.sample1$depth_ft)
df.sample = sample_frac(df,0.1,replace=F)
pairs(df.sample)
df.sample1 = filter(df.sample,arsenic_ppb>0)
plot(df.sample1$arsenic_ppb~df.sample1$depth_ft)
hist(df.sample1$arsenic_ppb~df.sample1$depth_ft)
hist(df.sample1$arsenic_ppb,df.sample1$depth_ft)
hist(df.sample1$arsenic_ppb)
hist(log(df.sample1$arsenic_ppb))
plot(df.sample1$arsenic_ppb~df.sample1$depth_ft)
plot(log(df.sample1$arsenic_ppb)~df.sample1$depth_ft)
plot(df.sample1$arsenic_ppb~df.sample1$depth_ft)
hist(df.sample1$arsenic_ppb)
hist(df.sample1$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts')
hist(df.sample1$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2)
hist(df.sample1$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of As Concentrations')
hist(df.sample1$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
1
df.sample2 = filter(df.sample,arsenic>10)
hist(df.sample2$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
df.sample2 = filter(df.sample,arsenic>10)
df.sample2 = filter(df.sample,arsenic_ppb>10)
hist(df.sample2$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
df.sample2 = filter(df.sample,arsenic_ppb>50)
# Histogram
hist(df.sample2$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
df.sample2 = df %>%
filter(arsenic_ppb>50) %>%
filter(arsenic_ppb<1000)
# Histogram
hist(df.sample2$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
df.sample2 = df %>%
filter(arsenic_ppb>50) %>%
filter(arsenic_ppb<2000)
# Histogram
hist(df.sample2$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
filter(arsenic_ppb>100) %>%
filter(arsenic_ppb<2000)
df.sample2 = df %>%
filter(arsenic_ppb>100) %>%
filter(arsenic_ppb<2000)
# Histogram
hist(df.sample2$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
df.sample2 = df %>%
filter(arsenic_ppb>100)
# Histogram
hist(df.sample2$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
summary(df)
summary(df)
summary(df[-lon])
summary(df,-lon)
summary(df,-lon)
summary(df[-lon])
summary(df)
summary(df[-lon,])
summary(df[,-lon])
summary(df[lon])
summary(df[lon,])
summary(df['lon'])
summary(df[-'lon'])
summary(df[,-'lon'])
summary(df[-'lon',])
summary(df['lon'])
View(df)
unique(df$arsenic_ppb)
table(df$arsenic_ppb)
x=table(df$arsenic_ppb)
x[1]
x[2]
hist(df.sample1$arsenic_ppb,breaks=50,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,breaks=10,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,breaks=100,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,breaks=1000,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,breaks=500,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,breaks=200,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,breaks=100,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,breaks=50,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,breaks=75,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df.sample1$arsenic_ppb,breaks=60,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
hist(df$arsenic_ppb,breaks=60,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
df.sample2 = filter(df,arsenic_ppb>0)
hist(df.sample2$arsenic_ppb,breaks=60,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
lm.fit = lm(arsenic_ppb~depth_ft,data=df)
predict(lm.fit,depth=150,interval='prediction')
summary(lm.fit)
lm.fit = lm(arsenic_ppb~.,data=df)
summary(lm.fit)
plot(df$arsenic_ppb,df$depth_ft)
abline(lm.fit,col='red')
lm.fit = lm(arsenic_ppb~depth_ft,data=df)
abline(lm.fit,col='red')
plot(lm.fit)
lm.fit = lm(arsenic_ppb~.,data=df)
summary(lm.fit)
df.train = sample_frac(df,0.7,replace=F)
df.test = setdiff(df,df.train)
lm.fit = lm(arsenic_ppb~.,data=df.train)
summary(lm.fit)
prob = predict(lm.fit,df.train,type='response')
prob
length(df.test)
length(df.test$arsenic_ppb)
length(prob)
prob = predict(lm.fit,df.test,type='response')
length(prob)
prob
df = df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
select(arsenic_ppb,depth_ft,lon,lat) %>%
mutate(as_10 = as.factor(ifelse(arsenic_ppb>=10,1,0))) %>%
mutate(as_50 = as.factor(ifelse(arsenic_ppb>=50,1,0)))
View(df)
df.sample = sample_frac(df,0.1,replace=F)
pairs(df.sample)
# Removed obs with 0 ppb as concentration to better see rest of data
df.sample1 = filter(df.sample,arsenic_ppb>0)
plot(df.sample1$arsenic_ppb~df.sample1$depth_ft)
# Histogram
df.sample2 = filter(df,arsenic_ppb>0)
hist(df.sample2$arsenic_ppb,breaks=60,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
### PREDICT ARSENIC LEVEL OF NEW WELL ###
## LINEAR REGRESSION ##
set.seed(1)
df.train = sample_frac(df,0.7,replace=F)
df.test = setdiff(df,df.train)
lm.fit = lm(arsenic_ppb~.,data=df.train)
summary(lm.fit)
prob = predict(lm.fit,df.test,type='response')
pred.10 = ifelse(prob>=10,1,0)
pred.50 = ifelse(prob>=50,1,0)
cm.10 = table(df.test$arsenic_ppb,pred.10)
cm.10 = table(df.test$arsenic_ppb,pred.10)
cm.10
cm.10 = table(df.test$as10,pred.10)
cm.10
cm.10 = table(df.test$as_10,pred.10)
cm.10
tp.10 = cm.10[4]/(cm.10[3]+cm.10[4])
tp.10
tn = cm.10[1]/(cm.10[1]+cm.10[2])
tn.10 = cm.10[1]/(cm.10[1]+cm.10[2])
tn.10
tp.50 = cm.50[4]/(cm.50[3]+cm.50[4])
tp.50
tn.50 = cm.50[1]/(cm.50[1]+cm.50[2])
tn.50
cm.50 = table(df.test$as_50,pred.50)
cm.50
tp.50 = cm.50[4]/(cm.50[3]+cm.50[4])
tp.50
tn.50 = cm.50[1]/(cm.50[1]+cm.50[2])
tn.50

mtext('Depth (ft)',side=4,line=3,cex = par("cex.lab"))
abline(lm.fit)
summary(lm.fit)
lm.fit=glm(As_ppb~depth_ft,data=df)
abline(lm.fit)
for (i in 1:5){
lm.fit[i] = glm(As_ppb~poly(depth_ft,i),data=df)
cv.error[i] = cv.glm(df,lm.fit,K=10)$delta[1]
}
lm.fit[1]
lm.fit[2]
lm.fit[3]
abline(lm.fit[1])
abline(lm.fit[2])
plot(df$As_ppb,df$depth_ft,axes=F,ann=F,col='darkgrey')
axis(3)
axis(4)
box()
mtext('Arsenic Concentration (ppb)',side=3,line=3,cex = par("cex.lab"))
mtext('Depth (ft)',side=4,line=3,cex = par("cex.lab"))
abline(lm.fit[2])
abline(lm.fit[1])
plot(df$As_ppb,df$depth_ft,axes=F,ann=F,col='darkgrey')
axis(3)
axis(4)
box()
mtext('Arsenic Concentration (ppb)',side=3,line=3,cex = par("cex.lab"))
mtext('Depth (ft)',side=4,line=3,cex = par("cex.lab"))
abline(lm.fit[1])
plot(df$As_ppb,df$depth_ft,axes=F,ann=F,col='darkgrey')
axis(3)
axis(4)
box()
mtext('Arsenic Concentration (ppb)',side=3,line=3,cex = par("cex.lab"))
mtext('Depth (ft)',side=4,line=3,cex = par("cex.lab"))
lm.fit[1]
abline(lm.fit[1])
poly(1,1)
?poly
library(leaps)
install.packages('leaps')
library(leaps)
regfit.full = regsubsets(As_ppb~.,df)
summary(regfit.full)
regfit.full = regsubsets(As_ppb~depth_ft+lon+lat,df)
summary(regfit.full)
reg. summary$rsq
reg.summary = summary(regfit.full)
par(mfrow =c(2,2))
plot(reg.summary$rss ,xlab=" Number of Variables ",ylab=" RSS",
type="l")
plot(reg.summary$adjr2 ,xlab =" Number of Variables ",
ylab=" Adjusted RSq",type="l")
which.max (reg.summary$adjr2)
which.max (reg.summary$adjr2)
points (11, reg.summary$adjr2[11], col ="red",cex =2, pch =20)
reg.summary$adjr2[11]
reg.summary$adjr2
best = which.max (reg.summary$adjr2)
points (11, reg.summary$adjr2[best], col ="red",cex =2, pch =20)
points (best, reg.summary$adjr2[best], col ="red",cex =2, pch =20)
points(best, reg.summary$adjr2[best], col ="red",cex =2, pch =20)
par(mfrow =c(2,2))
plot(reg.summary$rss ,xlab=" Number of Variables ",ylab=" RSS",type="l")
plot(reg.summary$adjr2 ,xlab =" Number of Variables ",ylab=" Adjusted RSq",type="l")
best = which.max (reg.summary$adjr2)
points(best,reg.summary$adjr2[best],col ="red",cex=2,pch=20)
plot(reg.summary$cp ,xlab =" Number of Variables ",ylab="Cp",type='l')
which.min (reg.summary$cp )
best.cp=which.min (reg.summary$cp)
points (best.cp,reg.summary$cp[best.cp],col="red",cex=2,pch=20)
best.rss = which.max(reg.summary$rss)
points(best.rss,reg.summary$rss[best.rss],col="red",cex=2,pch=20)
best.rss = which.min(reg.summary$rss)
points(best.rss,reg.summary$rss[best.rss],col="red",cex=2,pch=20)
reg.summary$rss
best.rss
reg.summary$rss[best.rss]
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab=" Number of Variables ",ylab=" RSS",type="l")
best.rss = which.min(reg.summary$rss)
points(best.rss,reg.summary$rss[best.rss],col="red",cex=2,pch=20)
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab=" Number of Variables ",ylab=" RSS",type="l")
best.rss = which.min(reg.summary$rss)
points(best.rss,reg.summary$rss[best.rss],col="red",cex=2,pch=20)
plot(reg.summary$adjr2 ,xlab =" Number of Variables ",ylab=" Adjusted RSq",type="l")
best.r2 = which.max (reg.summary$adjr2)
points(best.r2,reg.summary$adjr2[best.r2],col="red",cex=2,pch=20)
plot(reg.summary$cp ,xlab ="Number of Variables",ylab="Cp",type='l')
best.cp=which.min (reg.summary$cp)
points (best.cp,reg.summary$cp[best.cp],col="red",cex=2,pch=20)
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab=" Number of Variables ",ylab=" RSS",type="l")
best.rss = which.min(reg.summary$rss)
points(best.rss,reg.summary$rss[best.rss],col="red",cex=2,pch=20)
plot(reg.summary$adjr2 ,xlab =" Number of Variables ",ylab=" Adjusted RSq",type="l")
best.r2 = which.max(reg.summary$adjr2)
points(best.r2,reg.summary$adjr2[best.r2],col="red",cex=2,pch=20)
plot(reg.summary$cp ,xlab ="Number of Variables",ylab="Cp",type='l')
best.cp=which.min(reg.summary$cp)
points (best.cp,reg.summary$cp[best.cp],col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab ="Number of Variables",ylab="BIC",type='l')
best.bic = which.min(reg.summary$bic)
points(best.bic,reg.summary$bic[best.bic],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables",ylab="RSS",type="l")
best.rss = which.min(reg.summary$rss)
points(best.rss,reg.summary$rss[best.rss],col="red",cex=2,pch=20)
plot(reg.summary$adjr2 ,xlab =" Number of Variables ",ylab=" Adjusted RSq",type="l")
best.r2 = which.max(reg.summary$adjr2)
points(best.r2,reg.summary$adjr2[best.r2],col="red",cex=2,pch=20)
plot(reg.summary$cp ,xlab ="Number of Variables",ylab="Cp",type='l')
best.cp=which.min(reg.summary$cp)
points (best.cp,reg.summary$cp[best.cp],col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab ="Number of Variables",ylab="BIC",type='l')
best.bic = which.min(reg.summary$bic)
points(best.bic,reg.summary$bic[best.bic],col="red",cex=2,pch=20)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
for (i in 1:5){
lm.fit[i] = glm(As_ppb~depth_ft^i+lon+lat,data=df)
cv.error[i] = cv.glm(df,lm.fit,K=10)$delta[1]
}
pairs(~As_ppb+depth_ft+lon+lat,data=df.sample,upper.panel=NULL,pch='.')
lm.fit = glm(As_ppb~depth_ft+lon+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)
library(glmnet)
install.packages('glmnet')
library(glmnet)
del cv.error
cv.error =0
lm.fit = glm(As_ppb~depth_ft+lon+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)
cv.error
library(tidyverse)
library(boot)
library(leaps)
library(glmnet)
### LOAD DATA ###
setwd('C:/Projects/Vanderbilt/bng_arsenic/')
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
as.df = rename(as.df,As_ppb = arsenic_ppb)
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
df = left_join(as.df,xy.df,by='geocode')
df = df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
filter(depth_ft>0) %>%
filter(depth_ft<3000) %>%
select(As_ppb,depth_ft,lon,lat,geocode) %>%
mutate(As_10 = as.factor(ifelse(As_ppb>=10,1,0))) %>%
mutate(As_50 = as.factor(ifelse(As_ppb>=50,1,0)))
summary(df)
set.seed(1)
lm.fit = glm(As_ppb~depth_ft+lon+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
lm.fit = glm(As_ppb~depth_ft+lon+lat^2,data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
lm.fit = glm(As_ppb~depth_ft+lon+log(lat),data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
lm.fit = glm(As_ppb~log(depth_ft)+lon+log(lat),data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
lm.fit = glm(As_ppb~log(depth_ft)+lon+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
lm.fit = glm(As_ppb~depth_ft^2+lon+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
lm.fit = glm(As_ppb~depth_ft^5+lon+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
lm.fit = glm(As_ppb~depth_ft,data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
x=model.matrix(As_ppb~depth_ft+lon+lat,df)[,-1]
y=df$As_ppb
grid = 10^seq(10,-2,length=100)
ridge.mod = glmnet(x,y,alpha=0,lambda=grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod[,60])
coef(ridge.mod[,50])
coef(ridge.mod[,4])
coef(ridge.mod)[,60]
predict(ridge.mod,s=50,type='coefficients')[1:20,]
predict(ridge.mod,s=50,type='coefficients')[1:4,]
set.seed(1)
train = sample(1:nrow(x),nrow(x)/2)
test=(-train)
y.test=y[test]
ridge.mod=glmnet(x[train,],y[train],alpha=0,lambda=grid,thresh=1e-12)
ridge.pred=predict(ridge.mod,s=4,newx=x[test,])
mean((ridge.pred-y.test)^2)
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=0)
plot(cv.out)
bestlam=cv.out$lambda.min
bestlam
ridge.pred=predict(ridge.mod,s=bestlam,newx=x[test,])
mean((ridge.pred-y.test)^2)
out = glmnet(x,y,alpha=0)
predict(out,type='coefficients',s=bstlam)[1:4,]
predict(out,type='coefficients',s=bestlam)[1:4,]
lasso.mod = glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
set.seed(1)
cv.out=cv.glmnet(x[train,],y[train],alpha=1)
plot(cv.out)
bestlam=cv.out$lambda.min
lasso.pred=predict(lasso.mod,s=bestlam,newx=x[test,])
mean((lasso.pred-y.test)^2)
out = glmnet(x,y,alpha=1,lambda=grid)
lasso.coef=predict(out,type='coefficients',s=bestlam)[1:4,]
lasso.coef
View(as.df)
8.63e+08
as.df$geocode
sum(as.df$geocode)
unique(as.df$geocode)
max(unique(as.df$geocode))
as.factor(as.df$geocode)
as.df$geocode = as.factor(as.df$geocode)
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
as.df = rename(as.df,As_ppb = arsenic_ppb)
as.df$geocode = as.factor(as.df$geocode)
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
df = left_join(as.df,xy.df,by='geocode')
df = df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
filter(depth_ft>0) %>%
filter(depth_ft<3000) %>%
select(As_ppb,depth_ft,lon,lat,geocode) %>%
mutate(As_10 = as.factor(ifelse(As_ppb>=10,1,0))) %>%
mutate(As_50 = as.factor(ifelse(As_ppb>=50,1,0)))
geo = as.factor(879094981)
geo
df.samp = filter(df,geocode=geo)
df.samp = filter(df,geocode==geo)
df.samp
lm.fit = glm(As_ppb~depth_ft+lon+lat,data=df.samp)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
cv.error = cv.glm(df.samp,lm.fit,K=10)$delta[1]
lm.fit = glm(As_ppb~depth_ft+lon+lat,data=df.samp)
cv.error = cv.glm(df.samp,lm.fit,K=10)$delta[1
cv.error = cv.glm(df.samp,lm.fit,K=10)$delta[1]
cv.error = cv.glm(df.samp,lm.fit,K=10)$delta[1]
warnings()
set.seed(1)
lm.fit = glm(As_ppb~depth_ft+lon+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
x=glm(depth_ft~lon+lat,data=df)
summary(x)
pairs(~As_ppb+depth_ft+lon+lat,data=df.sample,upper.panel=NULL,pch='.')
df.sample = sample_frac(df,0.1,replace=F)
pairs(~As_ppb+depth_ft+lon+lat,data=df.sample,upper.panel=NULL,pch='.')
lm.fit = glm(As_ppb~depth_ft+depth_ft*lat+lon+lat,data=df)
summary(lm.fit)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
cv.error
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat,df)
reg.summary = summary(regfit.full)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
lm.fit = glm(As_ppb~depth_ft*lat+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
lm.fit = glm(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
cv.error = cv.glm(df,lm.fit,K=10)$delta[2]
x=cv.glm(df,lm.fit,K=10)
x$K
x$call
x$delta
x$seed
lm.fit = glm(As_10~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat,data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
cv.glm(df,lm.fit,K=10)$delta[1]
lm.fit = glm(As_10~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat+poly(lat,1),poly(lat,2),poly(lat,3),data=df)
lm.fit = glm(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat+poly(lat,1),poly(lat,2),poly(lat,3),data=df)
lm.fit = glm(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat+poly(lat,1)+poly(lat,2)+poly(lat,3),data=df)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat+poly(lat,1)+poly(lat,2)+poly(lat,3),df)
reg.summary = summary(regfit.full)
reg.summary = summary(regfit.full)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
lm.fit = glm(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat+poly(lat,1),data=df)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat+poly(lat,1),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat+poly(lat*depth_ft,1),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
poly(lat,1)
poly(df$lat,1)
poly(5,1)
poly(1,1)
poly(c(1,2,3,4,4),1)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat+poly(lat,2),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+lat+poly(lat,1),df)
warnings()
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lon+lat*lon+lon+lat+poly(lat,1),df)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lat*lon+lon+poly(lat,1),df)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon++lon+poly(lat,1),df)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lat+depth_ft*lon+lon+poly(lat,1),df)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,1),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,2),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic"
)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,1)+poly(lat,2)+poly(lat,3),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,1)+poly(lat,2),df)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,5),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,10),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,3),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
lm.fit = glm(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,3),data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
df.gt0As = filter(df,As_ppb>0)
hist(df.gt0As$As_ppb,breaks=60,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
df.gt0As = filter(df,As_ppb>0)
hist(df.gt0As$As_ppb,breaks=60,xlab='As Concentration (ppb)',ylab='counts',col=2,main='Histogram of Non-Zero As Concentrations')
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
as.df = rename(as.df,As_ppb = arsenic_ppb)
as.df$geocode = as.factor(as.df$geocode)
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
df = left_join(as.df,xy.df,by='geocode')
df = df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
filter(depth_ft>0) %>%
filter(depth_ft<3000) %>%
df = left_join(as.df,xy.df,by='geocode')
setwd('C:/Projects/Vanderbilt/bng_arsenic/')
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
as.df = rename(as.df,As_ppb = arsenic_ppb)
as.df$geocode = as.factor(as.df$geocode)
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
df = left_join(as.df,xy.df,by='geocode')
df = left_join(as.df,xy.df,by='geocode')
as.df = tbl_df(read.csv('data/bamwsp.csv',header=T))
as.df = rename(as.df,As_ppb = arsenic_ppb)
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
df = left_join(as.df,xy.df,by='geocode')
df$geocode = as.factor(as.df$geocode)
df = df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
filter(depth_ft>0) %>%
filter(depth_ft<3000) %>%
filter(As_ppb<1000) %>%
select(As_ppb,depth_ft,lon,lat,geocode) %>%
mutate(As_10 = as.factor(ifelse(As_ppb>=10,1,0))) %>%
mutate(As_50 = as.factor(ifelse(As_ppb>=50,1,0)))
summary(df)
df.sample = sample_frac(df,0.1,replace=F)
pairs(~As_ppb+depth_ft+lon+lat,data=df.sample,upper.panel=NULL,pch='.')
(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,3),df)
regfit.full = regsubsets(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,3),df)
par(mfrow=c(2,2))
plot(regfit.full,scale ="r2")
plot(regfit.full,scale ="adjr2")
plot(regfit.full,scale ="Cp")
plot(regfit.full,scale ="bic")
set.seed(1)
lm.fit = glm(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,3),data=df)
cv.error = cv.glm(df,lm.fit,K=10)$delta[1]
pairs(~As_ppb+depth_ft+lon+lat,data=df.sample,upper.panel=NULL,pch='.')
plot(df$As_ppb,df$depth_ft,axes=F,ann=F,col='darkgrey')
axis(3)
axis(4)
box()
mtext('Arsenic Concentration (ppb)',side=3,line=3,cex = par("cex.lab"))
mtext('Depth (ft)',side=4,line=3,cex = par("cex.lab"))
log.fit = glm(As_ppb~depth_ft+depth_ft*lon+lon+poly(lat,3),data=df,family=binomial)
log.fit = glm(As_10~depth_ft+depth_ft*lon+lon+poly(lat,3),data=df,family=binomial)
summary(log.fit)
cv.glm(df,log.fit,K=10)
cv.glm(df,log.fit,K=10)$delta[1]
predict(log.fit,type='response')
contrasts()
contrasts(log.fit)
predict(lm.fit,type='response')
contrasts(As_ppb)
contrasts(As_10)
contrasts(df$As_10)
contrasts(df$As_50)
df[1]
df[,1]
df[1,]
predict(log.fit,df[1,])
predict(lm.fit,df[1,])
predict(lm.fit,df[2,])
predict(lm.fit,df[20,])
predict(lm.fit,df[5000,])
df[5000,"5000"]
df[5000,]
-df$depth_ft
# Plot As concentrations vs Depth
plot(df$As_ppb,-df$depth_ft,axes=F,ann=F,col='darkgrey')
axis(3)
axis(4)
box()
mtext('Arsenic Concentration (ppb)',side=3,line=3,cex = par("cex.lab"))
mtext('Depth (ft)',side=4,line=3,cex = par("cex.lab"))
plot(df$As_ppb,-df$depth_ft,axes=F,ann=F,col='darkgrey')
axis(3)
axis(4)
box()
mtext('Arsenic Concentration (ppb)',side=3,line=3,cex = par("cex.lab"))
mtext('Depth (ft)',side=4,line=3,cex = par("cex.lab"))
plot(df$As_ppb,-df$depth_ft,axes=F,ann=F,col='darkgrey')
axis(3)
axis(2)
box()
mtext('Arsenic Concentration (ppb)',side=3,line=3,cex = par("cex.lab"))
mtext('Depth (ft)',side=2,line=3,cex = par("cex.lab"))
log.fit = glm(As_10~depth_ft,data=df,family=binomial)
cv.glm(df,log.fit,K=10)$delta[1]
crPlots(log.fit)
data(mammals, package="MASS")
mammals.glm <- glm(log(brain) ~ log(body), data = mammals)
(cv.err <- cv.glm(mammals, mammals.glm)$delta)
(cv.err.6 <- cv.glm(mammals, mammals.glm, K = 6)$delta)
cv.err <- cv.glm(mammals, mammals.glm)$delta
library(tidyverse)
library(boot)
library(leaps)
library(glmnet)
### LOAD DATA ###
setwd('C:/Projects/Vanderbilt/bng_arsenic/')
as.df = tbl_df(read.csv('data/bamwsp_full.csv',header=T))
as.df = rename(as.df,As_ppb = arsenic_ppb)
xy.df = tbl_df(read.csv('data/Mouza_25km.csv'))
xy.df = rename(xy.df,geocode = GEO2,lon = X_COORD,lat = Y_COORD)
df = left_join(as.df,xy.df,by='geocode')
df$geocode = as.factor(as.df$geocode)
df = df %>%
filter(!is.na(lon)) %>%
filter(!is.na(lat)) %>%
filter(depth_ft>0) %>%
filter(depth_ft<3000) %>%
filter(As_ppb<1000) %>%
select(As_ppb,depth_ft,lon,lat,geocode) %>%
mutate(As_10 = as.factor(ifelse(As_ppb>=10,1,0))) %>%
mutate(As_50 = as.factor(ifelse(As_ppb>=50,1,0)))
log.fit = glm(As_ppb~depth_ft+lat+lon,data=df)
cv.glm(df,log.fit,K=10)$delta[1]
library(gbm)
boost.as = gbm(As_ppb~depth_ft+lat+lon,distribution='gaussian',n.trees=10000,shrinkage=0.01,interaction.depth=4)
boost.as = gbm(As_ppb~depth_ft+lat+lon,distribution='gaussian',n.trees=10000,shrinkage=0.01,interaction.depth=4,data=df)
boost.as = gbm(As_ppb~depth_ft+lat+lon,distribution='gaussian',n.trees=100,shrinkage=0.01,interaction.depth=4,data=df)
cv.gbm(boost.as)
